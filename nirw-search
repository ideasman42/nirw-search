#!/usr/bin/env python3
# GPL License, Version 3.0 or later

'''
NIRW - nifty interactive regex wrangler.
'''

__all__ = (
    'search_and_edit',
)

import os
import sys
import cmd
import shlex
import re

help_text = '''\
Keys:

- Quit:       Ctrl-C
- Re-display: Ctrl-D

Special Input:

- ``?``:    Show the help message.

Filter Commands:

- ``:f    Text``    - filters on text
- ``:p    Text``    - filters on path
- ``:fr   Text``    - filters on text with regex.
- ``:pr   Text``    - filters on path with regex.


Adding a '-' character immediately after the command masks matches out.

eg::

   :f- Foo

Remove all lines containing 'Foo'.

Other Commands:

- ``:u``    Undoes the last filter command.
'''


# -----------------------------------------------------------------------------
# General Utilities

def finditer_with_line_and_numbers(pattern, string):
    '''
    A version of 're.finditer' that returns;
    (line, content, range) triplets.
    '''
    matches = list(pattern.finditer(string))
    if not matches:
        return []

    end = matches[-1].start()
    # '-1' so a failed 'rfind' maps to the first line.
    newline_table = {-1: 0}
    for i, m in enumerate(re.finditer(r'\n', string), 1):
        # don't find newlines past our last match
        offset = m.start()
        if offset > end:
            break
        newline_table[offset] = i

    string_find = string.find
    string_rfind = string.rfind

    # Failing to find the newline is OK, -1 maps to 0 above.
    for m in matches:
        m_start = m.start()
        m_end = m.end()
        newline_offset = string_rfind('\n', 0, m_start)
        newline_end = string_find('\n', m_end)
        if newline_end == -1:
            newline_end = len(string)
        content_offset = newline_offset + 1
        content = string[content_offset:newline_end]
        yield (
            # match, in fact we don't need it.
            # m,
            # the line number
            newline_table[newline_offset],
            # actual text
            content,
            # matching ranges
            [(m_start - content_offset, m_end - content_offset)],
        )


def iter_files(path, include_files, exclude_files):
    include_files_match = include_files.match if include_files else None
    exclude_files_match = exclude_files.match if exclude_files else None
    for dirpath, dirnames, filenames in os.walk(path):
        dirnames[:] = [d for d in sorted(dirnames) if not d[0] == '.']
        filenames = [
            f for f in filenames
            if (include_files_match is None or
                include_files_match(f) is not None)
            if (exclude_files_match is None or
                exclude_files_match(f) is None)
        ]
        for filename in sorted(filenames):
            yield os.path.join(dirpath, filename)


def merge_ranges(ranges):
    '''
    Range must be already sorted.
    '''
    result = []
    if ranges:
        min_step, max_step = ranges[0]
        for min_test, max_test in ranges:
            if min_test <= max_step:
                if max_step < max_test:
                    max_step = max_test
            else:
                # yield (min_step, max_step)
                result.append((min_step, max_step))
                min_step = min_test
                max_step = max_test
        # yield (min_step, max_step)
        result.append((min_step, max_step))
    return result


def string_color_ranges(text, ranges, color_pair):
    '''
    Ranges need to be a list of min, max's
    (sorted by max, largest first, must be non-overlapping)
    '''
    color_start, color_end = color_pair
    last = 0
    text_split = []
    for range_start, range_end in ranges:
        text_split.extend([
            text[last:range_start],
            color_start,
            text[range_start:range_end],
            color_end,
        ])
        last = range_end
    text_split.append(text[last:])
    return ''.join(text_split)


def pretty_quote(text):
    '''
    Only use for error messages to give clear output,
    ``shlex.quote`` that ensures we get quotations.
    '''
    text = shlex.quote(text)
    if text[0] in '\'"':
        return text
    else:
        return '\'{}\''.format(text)


# -----------------------------------------------------------------------------
# Config Storage

class Config:
    __slots__ = (
        'editor',
        'is_persistent',
        'is_multiline',
        'search_re_flags',
        'search_path',
        'include_files',
        'exclude_files',
        'show_color',
        'show_progress',
        'color_pair',
    )


# -----------------------------------------------------------------------------
# Local

Match = __import__('collections').namedtuple(
    'Match', [
        # string (filepath)
        'filepath',
        # int
        'line_number',
        # string (may be multi-line)
        'text',
        # list of numbers [(min, max), ...]
        'ranges',
    ],
)


def search_execute(
        search_path,
        include_files,
        exclude_files,
        show_progress,
        search_regex_list,
        results_output,
        errors_output,
):
    '''
    Search files, output as generator and into 'results_output' list.
    This is done so we can display the output before its finished searching.
    '''
    search_regex_first = search_regex_list[0]
    search_regex_others_finditer = [
        re_other.finditer for re_other in search_regex_list[1:]
    ]
    is_search_regex_multi = len(search_regex_list) > 1

    if show_progress:
        filepath_count = 0
        stdout_write = sys.stdout.write

    for filepath in iter_files(search_path, include_files, exclude_files):

        if show_progress:
            filepath_count += 1
            stdout_write('\033[K > {:<8}{}\r'.format(
                filepath_count,
                filepath,
            ))

        try:
            with open(
                    filepath, 'r',
                    encoding='utf-8', errors='backslashreplace',
            ) as fh:
                data = fh.read()
        except Exception as ex:
            # display after results
            errors_output.append(str(ex))
            continue

        for (nr, l, ranges) in finditer_with_line_and_numbers(
                search_regex_first, data,
        ):
            if is_search_regex_multi:
                for text_finditer in search_regex_others_finditer:
                    match_other = None
                    for match_other in text_finditer(l):
                        ranges.append(match_other.span())
                    if match_other is None:
                        l = None
                        break
                # failed to find one of 'search_regex_list'
                # continue
                if l is None:
                    continue
                ranges.sort()
                ranges[:] = merge_ranges(ranges)

            match_data = Match(filepath, nr, l, ranges)
            results_output.append(match_data)

            if show_progress:
                # Tab characters can leave screen junk occasionally.
                stdout_write('\033[K')

            yield match_data

    if show_progress:
        stdout_write('\033[K')


def search_display_ex(
        results,
        is_multiline: bool,
        show_color: bool,
        color_pair: tuple,
):
    '''
    Note that 'results' may be a generator.
    '''
    stdout_write = sys.stdout.write
    if is_multiline:
        format_str = '{} {}:{}:\n{}\n'.format
    else:
        format_str = '{} {}:{}: {}\n'.format

    for (i, (filepath, line_number, text, ranges)) in enumerate(results, 1):
        if show_color is True:
            text = string_color_ranges(text, ranges, color_pair)
        stdout_write(format_str(i, filepath, line_number, text))


def search_display(results: list, conf):
    search_display_ex(
        results,
        conf.is_multiline,
        conf.show_color,
        conf.color_pair,
    )


def errors_display(errors: list):
    stdout_write = sys.stdout.write
    stdout_write('Error(s) occurred:\n')
    format_str = '{}\n'.format
    for err in errors:
        stdout_write(format_str(err))


def display_clear():
    import subprocess
    if os.name == 'nt':
        command = ['cls']
    else:
        command = ['tput', 'reset']
    subprocess.run(command)


def display_clear_line():
    sys.stdout.write('\r\033[K')
    sys.stdout.flush()


def parse_command_args_from_line(line: str) -> (str, str):
    '''
    Return command and arguments.
    '''
    if not line.startswith(':'):
        return None, None
    if not line[1:].rstrip():
        return None, None
    command, args = line.partition(' ')[::2]
    command = command[1:]
    return command, args


def parse_filter_from_command(command: str) -> dict:
    '''
    Takes command with ':' removed.
    '''
    filter_args = dict(
        is_regex=False, is_negate=False, is_path=False,
    )

    if command.endswith('-'):
        filter_args['is_negate'] = True
        command = command[:-1]
    if command.endswith('r'):
        filter_args['is_regex'] = True
        command = command[:-1]

    if command == 'f':
        filter_args['is_path'] = False
    elif command == 'p':
        filter_args['is_path'] = True
    else:
        return None

    return filter_args


class SearchCmd(cmd.Cmd):
    intro = 'Type help or ? to list commands.\n'
    prompt = '(unset) '
    doc_leader = help_text
    file = None

    # Gets set to a list.
    results = None
    # History of previous results
    # (so we can undo filtering operations).
    result_history = None

    # Config class instance
    conf = None

    @staticmethod
    def _default_number(conf, results, num):
        import subprocess

        match_data = results[num]

        filepath = shlex.quote(match_data.filepath)
        line_number = str(match_data.line_number + 1)
        column = str(match_data.ranges[0][0] + 1)

        editor_args = conf.editor
        editor_args = editor_args.replace('{file}', filepath)
        editor_args = editor_args.replace('{line}', line_number)
        editor_args = editor_args.replace('{column}', column)

        subprocess.run(editor_args, shell=True)
        if conf.is_persistent:
            return None
        # Stop!
        return True

    @staticmethod
    def _default_command(conf, results, result_history, line, is_regex=False):
        '''
        Slightly VIM like commands.
        '''

        command, args = parse_command_args_from_line(line)
        if command is None:
            print('No command in "{}"'.format(line))
            return

        if command == 'u':
            # Undo
            if not result_history:
                print('Nothing to undo!')
                return
            results[:] = result_history.pop()
            search_display(results, conf)
            return
        elif command[0] in {'f', 'p'}:
            filter_args = parse_filter_from_command(command)
            if filter_args is None:
                print('Command ":{}" contains unknown syntax!'.format(command))
                return
            SearchCmd._default_filter(
                conf, results, result_history, args, **filter_args,
            )
        else:
            print('Command ":{}" not known!'.format(command))
            return

    @staticmethod
    def _default_search(conf, results, result_history, line):
        # Perform a new search
        try:
            search_regex_list = [re.compile(line)]
        except Exception as ex:
            print('Invalid regular expression {}, error {}'.format(
                pretty_quote(line),
                pretty_quote(str(ex)),
            ))
            return None

        # Fill new list incase the user presses Ctrl-C
        # while searching - don't leave in an invalid state.
        results_new = []
        errors_new = []
        search_display(
            search_execute(
                conf.search_path,
                conf.include_files,
                conf.exclude_files,
                conf.show_progress,
                search_regex_list,
                results_new,
                errors_new,
            ),
            conf,
        )
        if errors_new:
            errors_display(errors_new)
        del errors_new

        SearchCmd.result_history.append(results[:])
        results[:] = results_new
        del results_new
        if not results:
            print('No results for {} in {}'.format(
                pretty_quote(line),
                pretty_quote(conf.search_path),
            ))
        return None

    @staticmethod
    def _default_filter(
            conf, results, result_history, line,
            is_regex=False, is_negate=False, is_path=False,
    ):
        '''
        Refine existing search (fallback when number isn't given).
        '''
        print(
            'Filtering{} {}: {}'.format(
                ' out' if is_negate else '',
                'path' if is_path else 'text',
                line,
            )
        )
        redisplay = False

        # Check we have a match
        try:
            input_search = re.compile(
                line if is_regex else re.escape(line)
            ).search
        except Exception as ex:
            print('Invalid regular expression {}, error {}'.format(
                pretty_quote(line),
                pretty_quote(str(ex)),
            ))
            return None

        # Collect new matches
        results_new = []

        if is_path:
            for match_data in results:
                if bool(input_search(match_data.filepath)) != is_negate:
                    results_new.append(match_data)
        else:
            for match_data in results:
                match = input_search(match_data.text)
                if bool(match) != is_negate:
                    if is_negate is False:
                        ranges = match_data.ranges
                        ranges.append((match.start(), match.end()))
                        ranges.sort()
                        match_data = match_data._replace(
                            ranges=merge_ranges(ranges)
                        )
                    results_new.append(match_data)

        if not results_new:
            print('Nothing found!')
        elif results_new == results:
            print('No change!')
        else:
            result_history.append(results[:])
            results[:] = results_new
            redisplay = True

        if redisplay:
            search_display(results, conf)

    @staticmethod
    def _complete_from_results(
            results, text, line, begidx, endidx,
            is_regex=False, is_path=False,
    ):
        comp = set()
        text_finditer = re.compile(
            text if is_regex else re.escape(text),
        ).finditer
        delim_search = re.compile(
            '[' +
            r'\s' +
            re.escape(r'~!@#$%^&*()[]{}<>,.\/|^+-*=;:?"\'`') +
            ']'
        ).search

        for match_data in results:
            if is_path:
                l = match_data.filepath
            else:
                l = match_data.text

            for match in text_finditer(l):
                w = l[match.end():]
                if w:
                    w_match = delim_search(w)
                    if w_match is not None:
                        w = w[:w_match.start()]
                    if w:
                        comp.add(w)
        return [text + w for w in sorted(comp)]

    @staticmethod
    def _refresh_prompt():
        if SearchCmd.results:
            SearchCmd.prompt = '(search-refine) '
        else:
            SearchCmd.prompt = '(search-new) '

    def precmd(self, line):
        SearchCmd.is_lastcmd_exit = False
        return line

    def postcmd(self, stop, line):
        if not stop:
            # Set the prompt
            self._refresh_prompt()
        return stop

    def default(self, line):
        try:
            num = int(line.strip())
        except ValueError:
            num = None

        if num is not None:
            num -= 1
            if num >= len(self.results):
                print('Number out of range!')
                return
            return self._default_number(self.conf, self.results, num)
        elif line.startswith(':'):
            return self._default_command(
                self.conf, self.results, self.result_history, line,
            )
        else:
            if self.results:
                return self._default_filter(
                    self.conf, self.results, self.result_history, line,
                )
            else:
                return self._default_search(
                    self.conf, self.results, self.result_history, line,
                )

    def completedefault(self, text, line, begidx, endidx):
        try:
            if line.startswith(':'):
                command, args = parse_command_args_from_line(line)
                if command is None:
                    return []

                if command == 'u':
                    return []
                elif command[0] in {'f', 'p'}:
                    filter_args = parse_filter_from_command(command)
                    # checked in the 'if' statement
                    assert(filter_args is not None)
                    return self._complete_from_results(
                        self.results, text, line, begidx, endidx,
                        is_path=filter_args['is_path'],
                    )
                else:
                    return []
        except:
            import traceback
            traceback.print_exc()
            return []

    def completenames(self, text, line, begidx, endidx):
        '''
        Needed so we can override completion for _all_ text
        not just commands.
        '''
        try:
            return self._complete_from_results(
                self.results, text, line, begidx, endidx, is_path=False,
            )
        except:
            import traceback
            traceback.print_exc()
            return []

    def do_EOF(self, _arg):
        '''
        Use Ctrl-D to cleat the terminal and re-display.
        '''
        display_clear()
        search_display(self.results, self.conf)


def search_and_edit(
    search_text: list,
    search_path: str,
    include_files: str,
    exclude_files: str,
    editor: str,
    is_persistent: bool,
    is_ignore_case: bool,
    is_multiline: bool,
    show_color: bool,
    color_pair: tuple,
    show_progress: bool,
) -> None:
    '''
    :arg search_text: List of regex formatted strings.
    :arg search_path: Root directory for searching.
    :arg include_files: Regex formatted string to match files against.
    :arg editor: Editor command and arguments.
    :arg is_persistent: Keep the command prompt open
        after opening an editor or pressing Ctrl-C.
    :arg is_ignore_case: Ignore case when searching.
    :arg is_multiline: Search across multiple lines.
    :arg show_color: Color highlight matches.
    :arg show_progress: Show the file being searched.
    '''
    # -------------------------------------------------------------------------
    # Sanitize Input

    search_re_flags = 0
    if is_ignore_case:
        search_re_flags |= re.IGNORECASE
    if is_multiline:
        search_re_flags |= re.MULTILINE

    def re_compile_or_none(expr, arg_id, flags=0):
        try:
            return re.compile(expr, flags)
        except Exception as ex:
            print('Failed to parse regex {} {}, error {}, abort!'.format(
                arg_id,
                pretty_quote(expr),
                pretty_quote(str(ex)),
            ))
            return None

    search_regex_list = []
    if search_text:
        for t in search_text:
            search_regex_list.append(
                re_compile_or_none(t, "search text", search_re_flags)
            )
            if search_regex_list[-1] is None:
                return
    else:
        print('No search text given, entering persistent mode.')
        is_persistent = True

    # We might want to optionally use case sensitive path checks.
    include_files = re_compile_or_none(
        include_files, "--include-files", re.IGNORECASE,
    )
    if include_files is None:
        return

    if exclude_files:
        exclude_files = re_compile_or_none(
            exclude_files, "--exclude-files", re.IGNORECASE,
        )
        if exclude_files is None:
            return

    if not os.path.exists(search_path):
        print((
            'Search path "--search-path {}", '
            'does not exist, abort!').format(
            pretty_quote(search_path),
        ))
        return

    if not os.path.isdir(search_path):
        print((
            'Search path "--search-path {}", '
            'is not a directory, abort!').format(
            pretty_quote(search_path),
        ))
        return

    conf = Config()
    conf.editor = editor
    conf.is_persistent = is_persistent
    conf.is_multiline = is_multiline
    conf.show_color = show_color
    conf.show_progress = show_progress
    conf.search_re_flags = search_re_flags
    conf.search_path = search_path
    conf.include_files = include_files
    conf.exclude_files = exclude_files
    conf.color_pair = color_pair

    # -------------------------------------------------------------------------
    # Search

    results = []
    errors = []
    result_history = []

    if search_text:
        search_display(
            search_execute(
                search_path,
                include_files,
                exclude_files,
                show_progress,
                search_regex_list,
                results,
                errors,
            ),
            conf,
        )
        if errors:
            errors_display(errors)
        del errors

    if not results:
        if not is_persistent:
            print('No results for [{}] in {}, exiting!'.format(
                ', '.join([pretty_quote(t) for t in search_text]),
                pretty_quote(conf.search_path),
            ))

            return

    SearchCmd.conf = conf
    SearchCmd.results = results
    SearchCmd.result_history = result_history
    SearchCmd.is_lastcmd_exit = False

    if results:
        intro = 'Enter a number or text to filter'
    else:
        intro = 'Enter a search text, then a number or text to filter'

    if is_persistent:
        intro = intro + ', Ctrl-C to reset, again to exit (? for help): '
    else:
        intro = intro + ', Ctrl-C to exit (? for help): '

    while True:
        SearchCmd._refresh_prompt()
        cmd = SearchCmd(completekey='tab')
        try:
            cmd.cmdloop(
                intro=intro,
            )
        except KeyboardInterrupt:
            display_clear_line()
            if conf.is_persistent and SearchCmd.is_lastcmd_exit is False:
                # again breaks
                SearchCmd.is_lastcmd_exit = True

                intro = (
                    'Resetting search (Ctrl-C pressed in persistent mode),\n'
                    'Start a new search or press again to exit:'
                )
                SearchCmd.results.clear()
                SearchCmd.result_history.clear()
                continue
            else:
                break

        if not conf.is_persistent:
            break


def argparse_create():
    import argparse
    import textwrap

    epilog = (
        '''\
Typically this should be executed by a wrapper or shell alias.

command line options:
''' +
        # Follow Python's --help display.
        textwrap.indent(help_text, '  ')
    )

    parser = argparse.ArgumentParser(
        description=__doc__,
        epilog=epilog,
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument(
        '--editor', dest='editor',
        metavar='EDITOR_COMMAND', required=True,
        help=(
            'Command used to edit file and arguments\n'
            'which will be passed to the editor:\n'
            '``{file}``, ``{line}``, ``{column}`` will be replaced\n'
            'with the file-name, line number and column respectively.'
        ),
    )

    # -----------------
    # Modified Behavior

    parser.add_argument(
        '--persistent',
        dest='is_persistent',
        default=False,
        action='store_true',
        help=(
            'Stay open after selecting a file,\n'
            'pressing Ctrl-C resets a new search instead of exiting,\n'
            'pressing twice exits.'
        ),
        required=False,
    )

    # -------------
    # Path Matching

    parser_group = parser.add_argument_group(
        title='filepath matching arguments',
        description=(
            'These options control which files are selected to be searched.'
        ),
    )

    parser_group.add_argument(
        '--search-path', dest='search_path',
        metavar='SEARCH_PATH', required=False, default='.',
        help='Path to search in, defaults to "." when not passed.',
    )

    parser_group.add_argument(
        '--include-files', dest='include_files',
        metavar='INCLUDE_FILES', required=True,
        help=(
            'Case insensitive regular expression matched against each file,\n'
            'only search files that pass.'
        ),
    )
    parser_group.add_argument(
        '--exclude-files', dest='exclude_files',
        metavar='EXCLUDE_FILES', required=False,
        default='\\.',
        help=(
            'Case insensitive regular expression matched against each file,\n'
            'only search files that fail. '
            'Defaults to "\\." (skip hidden files).'
        ),
    )

    # -------------------
    # Expression Matching

    parser_group = parser.add_argument_group(
        title='expression matching arguments',
        description='These options control how matching is performed'
    )
    # Literal text.
    parser_group.add_argument(
        '--literal',
        dest='is_literal',
        default=False,
        action='store_true',
        help=(
            'Search for the literal string\n'
            'instead of interpreting as a regex expression\n'
            '(only applies to arguments passed in via the command line).'
        ),
        required=False,
    )
    # Same as grep.
    parser_group.add_argument(
        '-i', '--ignore-case',
        dest='is_ignore_case',
        default=False,
        action='store_true',
        help='Case insensitive search.',
        required=False,
    )
    # Same as pcregrep.
    parser_group.add_argument(
        '-M', '--multiline',
        dest='is_multiline',
        default=False,
        action='store_true',
        help='Multi-line search.',
        required=False,
    )

    # -------
    # Display

    parser_group = parser.add_argument_group(
        title='display arguments',
        description='Control the search output.'
    )
    # Same as pcregrep.
    parser_group.add_argument(
        '--color',
        dest='color',
        default='auto',
        help='Color highlight matches.',
        required=False,
        choices=['auto', 'always', 'never']
    )
    parser_group.add_argument(
        '--color-reverse',
        dest='is_color_reverse',
        help=(
            'Inverse highlight color '
            '(for improved white space highlighting).'
        ),
        action='store_true',
        default=False,
        required=False,
    )

    parser_group.add_argument(
        '--progress',
        dest='progress',
        default='auto',
        help='Display the file currently being searched.',
        required=False,
        choices=['auto', 'always', 'never']
    )

    parser.add_argument(
        'search',
        help=(
            '\n'
            'Text to search files for\n'
            '(must be a regular expression unless ``--literal`` is passed).\n'
            '\n'
            'When multiple search arguments are passed,\n'
            'the results must match all (in any order).\n\n'
            'When no search terms are given ``--persistent`` mode is enabled\n'
            'so you can perform multiple searches.'
        ),
        nargs='*',
    )

    return parser


def main():
    import re

    args = argparse_create().parse_args()

    if args.is_literal:
        search_text = [re.escape(t) for t in args.search if t]
    else:
        search_text = [t for t in args.search if t]

    is_interactive = sys.stdout.isatty()

    if args.color == 'always':
        show_color = True
    elif args.color == 'never':
        show_color = False
    else:
        show_color = is_interactive

    color_pair = '\033[92m', '\033[0m',

    if args.is_color_reverse:
        color_pair = (color_pair[0] + '\033[7m'), color_pair[1]

    if args.progress == 'always':
        show_progress = True
    elif args.progress == 'never':
        show_progress = False
    else:
        show_progress = is_interactive

    search_and_edit(
        search_text,
        search_path=args.search_path,
        include_files=args.include_files,
        exclude_files=args.exclude_files,
        editor=args.editor,
        is_persistent=args.is_persistent,
        is_ignore_case=args.is_ignore_case,
        is_multiline=args.is_multiline,
        show_color=show_color,
        color_pair=color_pair,
        show_progress=show_progress,
    )


if __name__ == '__main__':
    # Even though we catch this during command line loop,
    # support exiting during search (without a stack trace).
    try:
        main()
    except KeyboardInterrupt:
        display_clear_line()
        print('Keyboard interrupt, abort!')
